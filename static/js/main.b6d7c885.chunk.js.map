{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","completed","title","TodoList","todos","map","todoItem","userId","Math","random","username","App","useState","setUser","setTitle","errorTitle","setErrorTitle","errorUser","setErrorUser","todosFromServer","allTodos","setAllTodos","lastId","item","sort","id1","id2","pop","lastTodoId","setTodo","userList","usersFromServer","userFromServer","todosList","todoFromServer","find","action","method","onSubmit","e","preventDefault","length","state","type","value","placeholder","onChange","event","target","replace","handleTitle","disabled","userItem","index","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6d7c885.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a\n    className=\"UserInfo\"\n    href={`mailto:${user.email}`}\n  >\n    {user.name}\n  </a>\n);\n","import React from 'react';\nimport className from 'classnames';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={className(\n      'TodoInfo',\n      {\n        'TodoInfo--completed': todo.completed,\n        'TodoInfo--not-ready': !todo.completed,\n      },\n    )}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n\n    {todo.user\n      && <UserInfo user={todo.user} />}\n  </article>\n);\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todoItem => (\n      <TodoInfo\n        todo={todoItem}\n        key={`${todoItem.userId}_${Math.random()}`}\n      />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React, { useState } from 'react';\nimport className from 'classnames';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport 'bulma/css/bulma.min.css';\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  const lastTodoId = (): number => {\n    const sortedIdList = todosFromServer.map(item => item.id).sort(\n      (id1, id2) => id1 - id2,\n    );\n    const lastId = sortedIdList.pop();\n\n    return !lastId\n      ? 1\n      : lastId;\n  };\n\n  const [user, setUser] = useState('');\n  const [title, setTitle] = useState('');\n  const [errorTitle, setErrorTitle] = useState(false);\n  const [errorUser, setErrorUser] = useState(false);\n  const [allTodos, setAllTodos] = useState([...todosFromServer]);\n  const [todo, setTodo] = useState({\n    id: lastTodoId(),\n    title: '',\n    userId: 0,\n    completed: false,\n  });\n\n  const userList: string[] = [...usersFromServer].map(\n    userFromServer => userFromServer.name,\n  );\n\n  const getUserById = (userId: number): User | null => {\n    const foundUser = usersFromServer.find(\n      userFromServer => userFromServer.id === userId,\n    );\n\n    return foundUser || null;\n  };\n\n  const todosList: Todo[] = allTodos.map(todoFromServer => ({\n    ...todoFromServer,\n    user: getUserById(todoFromServer.userId),\n  }));\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (title.length === 0) {\n      setErrorTitle(true);\n    }\n\n    if (title.length > 0) {\n      setErrorTitle(false);\n    }\n\n    if (!user) {\n      setErrorUser(true);\n    }\n\n    if (user) {\n      setErrorUser(false);\n    }\n\n    if (title && user) {\n      setAllTodos(state => ([...state, todo]));\n      setUser('');\n      setTitle('');\n    }\n  };\n\n  const handleTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    let { value } = event.target;\n\n    value = value.replace(\n      /[!@#$%'`\";:|^&*,.\\\\<>?/()_+={\\][}-]/g, '',\n    );\n\n    setTitle(value);\n    setErrorTitle(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"box\">\n        <h1 className=\"title\">\n          Add todo form\n        </h1>\n\n        <form\n          className=\"form\"\n          action=\"/api/users\"\n          method=\"POST\"\n          onSubmit={(e) => handleSubmit(e)}\n        >\n          <div className=\"field\">\n            <label className=\"label\">\n              {'Title: '}\n              <input\n                className={className(\n                  'input',\n                  { 'is-danger': errorTitle },\n                )}\n                name=\"title\"\n                type=\"text\"\n                value={title}\n                data-cy=\"titleInput\"\n                placeholder=\"Enter a title\"\n                onChange={(e) => handleTitle(e)}\n              />\n            </label>\n\n            {errorTitle\n            && (\n              <span\n                className=\"\n                  error\n                  help\n                  is-danger\"\n              >\n                Please enter a title\n              </span>\n            )}\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">\n              {'User: '}\n              <div className=\"control\">\n                <div\n                  className={className(\n                    'select',\n                    {\n                      'is-danger': errorUser && !user,\n                      'is-link': user,\n                    },\n                  )}\n                >\n                  <select\n                    className=\"select__input\"\n                    name=\"user\"\n                    data-cy=\"userSelect\"\n                    value={\n                      !user\n                        ? 0\n                        : user\n                    }\n                    onChange={(e) => {\n                      setUser(e.target.value);\n                      setErrorUser(false);\n                    }}\n                  >\n                    <option\n                      value=\"0\"\n                      disabled\n                    >\n                      Choose a user\n                    </option>\n                    {userList.map((userItem, index) => (\n                      <option\n                        key={`${userItem}_${Math.random()}`}\n                        value={index + 1}\n                      >\n                        {userItem}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </label>\n\n            {errorUser\n            && (\n              <span\n                className=\"\n                  error\n                  help\n                  is-danger\"\n              >\n                Please choose a user\n              </span>\n            )}\n          </div>\n\n          <button\n            className=\"\n              button\n              is-link\"\n            type=\"submit\"\n            data-cy=\"submitButton\"\n            onClick={() => {\n              if (title && user) {\n                (setTodo(state => (\n                  {\n                    id: state.id + 1,\n                    title,\n                    userId: +user,\n                    completed: false,\n                  }\n                )));\n              }\n            }}\n          >\n            Add\n          </button>\n        </form>\n\n        <TodoList todos={todosList} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}